CREATE TABLE audit_events
(
    event_date       DATE,
    event_time       TIMESTAMP,
    event_id         UUID,
    actor_id         UUID,    -- The ID of the user or system that performed the action
    actor_type       TINYINT, -- Actor type:  0: OTHER, 1: USER, 2: SYSTEM, 3: API_KEY, 4: SERVICE
    actor_ip_address INET,
    event_type       TINYINT, -- Event type: 0: OTHER, 1: AUTH, 2: RESOURCE_CHANGE, 3: ACCESS_CONTROL, 4: SYSTEM, 5: SECURITY
    event_action     TEXT,    -- A specific action within the type (e.g., 'LOGIN_SUCCESS', 'USER_UPDATE')
    event_status     TINYINT, -- Event status: 0: OTHER, 1: SUCCESS, 2: FAILURE, 3: PARTIAL
    resource_type    TEXT,    -- The type of entity that was affected (e.g., 'USER', 'PROJECT')
    resource_id      UUID,
    organization_id  UUID,
    project_id       UUID,
    correlation_id   UUID,    -- A unique ID to link all events generated by a single API request
    user_agent       TEXT,
    previous_state   TEXT,    -- A JSON snapshot of the resource before the change
    current_state    TEXT,    -- A JSON snapshot of the resource after the change
    PRIMARY KEY ((event_date), event_time, event_id)
) WITH CLUSTERING ORDER BY (event_time DESC, event_id ASC)
   AND compaction = {'class': 'TimeWindowCompactionStrategy', 'compaction_window_unit': 'DAYS', 'compaction_window_size': 1}
   AND compression = {'class': 'LZ4Compressor', 'chunk_length_in_kb': 128}
   AND default_time_to_live = 2592000 -- Audit logs are kept for 30 days
   AND bloom_filter_fp_chance = 0.001
   AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
   AND comment = 'Immutable audit trail, optimized for high-volume writes and time-series queries.';

CREATE MATERIALIZED VIEW events_by_actor AS
SELECT actor_id,
       event_date,
       event_time,
       event_id,
       event_type,
       event_action,
       event_status,
       resource_type,
       resource_id,
       organization_id,
       project_id
FROM audit_events
WHERE actor_id IS NOT NULL
  AND event_date IS NOT NULL
  AND event_time IS NOT NULL
  AND event_id IS NOT NULL
PRIMARY KEY ((actor_id, event_date), event_time, event_id)
WITH CLUSTERING ORDER BY (event_time DESC, event_id ASC);

CREATE MATERIALIZED VIEW events_by_organization AS
SELECT organization_id,
       event_date,
       event_time,
       event_id,
       actor_id,
       event_type,
       event_action,
       event_status,
       resource_type,
       resource_id,
       project_id
FROM audit_events
WHERE organization_id IS NOT NULL
  AND event_date IS NOT NULL
  AND event_time IS NOT NULL
  AND event_id IS NOT NULL
PRIMARY KEY ((organization_id, event_date), event_time, event_id)
WITH CLUSTERING ORDER BY (event_time DESC, event_id ASC);